#!/usr/bin/env node

var program = require('commander');
var mkdirp  = require('mkdirp');
var pkg     = require('../package.json');
var version = pkg.version;
var os      = require('os');
var fs      = require('fs');
var ncp     = require('ncp');

program
    .version(version)
    .usage('[options] [dir]')
    .option('-t, --template', 'path to template (default to template folder in bin)')
    .parse(process.argv);

var path = program.args.shift() || '.';

var templatePath = './template';
if (program.template) {
    templatePath = program.template;
}

(function createApplication(path) {
    emptyDirectory(path, function(empty){
        if (empty || program.force) {
            createApplicationAt(path);
        } else {
            program.confirm('destination is not empty, continue? ', function(ok){
                if (ok) {
                    process.stdin.destroy();
                    createApplicationAt(path);
                } else {
                    abort('aborting');
                }
            });
        }
    });
})(path);

/**
 * Create application at the given directory `path`.
 *
 * @param {String} path
 */
function createApplicationAt(path) {
    console.log();

    mkdir(path, function(){
        copyTemplate();
    });
}

/**
 * Copy the template to the given directory `path`.
 *
 */
function copyTemplate() {
    console.log('copying template...');
    ncp(templatePath, path, function(err) {
        if (err) {
            console.log('error: ');
            console.log(err);
        } else {
            console.log('template copied');
        }
    })
};

/**
 * Mkdir -p.
 *
 * @param {String} path
 * @param {Function} fn
 */
function mkdir(path, fn) {
    mkdirp(path, 0755, function(err){
        if (err) throw err;
        console.log('create: ' + path);
        fn && fn();
    });
}

/**
 * Check if the given directory `path` is empty.
 *
 * @param {String} path
 * @param {Function} fn
 */
function emptyDirectory(path, fn) {
    fs.readdir(path, function(err, files){
        if (err && 'ENOENT' != err.code) throw err;
        fn(!files || !files.length);
    });
}

/**
 * Exit with the given `str`.
 *
 * @param {String} str
 */
function abort(str) {
    console.error(str);
    process.exit(1);
}
